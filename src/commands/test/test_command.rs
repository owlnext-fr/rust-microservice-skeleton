use crate::{
    core::commands::{
        console_command::{CommandResult, ConsoleCommand},
        console_command_utils::ConsoleIO,
    },
    middlewares::cron_log_middleware::CronLogMiddleware,
};

use anyhow::Result;
use std::{
    collections::{BTreeMap, HashMap},
    thread, time, vec,
};

pub struct TestCommand {
    cron_log_middleware: CronLogMiddleware,
}

impl TestCommand {
    pub fn new(cron_log_middleware: CronLogMiddleware) -> Self {
        Self {
            cron_log_middleware,
        }
    }
}

#[async_trait]
impl ConsoleCommand for TestCommand {
    fn get_name(&self) -> String {
        "console:utils:test".into()
    }

    fn get_cron_middleware(&self) -> &CronLogMiddleware {
        &self.cron_log_middleware
    }

    async fn do_run(&self, _args: &HashMap<String, Option<String>>) -> Result<CommandResult> {
        let io = ConsoleIO::new();

        io.title("Hello there, i am title");

        io.new_line();

        io.section("ima section (d'assault, lol mdr)");
        io.new_line();

        io.write("print");
        io.writeln("  ---println in line end");
        io.writeln("println");

        io.new_line();

        io.listing(vec!["apples", "bananas", "oranges"]);

        io.new_line();

        io.comment("I am a comment");

        io.new_line();

        io.success("Yes ! it's a success !");

        io.new_line();

        io.error("Ew ! it's an error :(");

        io.new_line();

        io.warning("Beware ! it's a warning :o");

        io.new_line();

        io.info("Hmmm ! interesting info");

        io.new_line();

        io.note("Oh ! should note this note !");

        let headers = vec!["Country", "ISO-3166-2", "ISO-3166-3"];
        let data = vec![
            vec!["France", "FR", "FRA"],
            vec!["Espagne", "SP", "SPA"],
            vec!["Etats-Unis", "US", "USA"],
        ];

        io.new_line();

        io.table(headers, data);

        io.new_line();

        let mut map = BTreeMap::<String, String>::new();
        map.insert("Rust".into(), "Rust est un langage de programmation compil√© multi-paradigme con√ßu et d√©velopp√© par Mozilla Research depuis 20106. Il a √©t√© con√ßu pour √™tre ¬´ un langage fiable, concurrent, pratique ¬ª7,8, supportant les styles de programmation purement fonctionnel, mod√®le d'acteur, proc√©dural, ainsi qu'orient√© objet sous certains aspects9.".into());
        map.insert("PHP".into(), "PHP: Hypertext Preprocessor40, plus connu sous son sigle PHP (sigle auto-r√©f√©rentiel), est un langage de programmation libre41, principalement utilis√© pour produire des pages Web dynamiques via un serveur HTTP40, mais pouvant √©galement fonctionner comme n'importe quel langage interpr√©t√© de fa√ßon locale. PHP est un langage imp√©ratif orient√© objet.".into());
        map.insert("Python".into(), "Python (prononc√© /pi.t…îÃÉ/) est un langage de programmation interpr√©t√©, multiparadigme et multiplateformes. Il favorise la programmation imp√©rative structur√©e, fonctionnelle et orient√©e objet. Il est dot√© d'un typage dynamique fort, d'une gestion automatique de la m√©moire par ramasse-miettes et d'un syst√®me de gestion d'exceptions ; il est ainsi similaire √† Perl, Ruby, Scheme, Smalltalk et Tcl.".into());

        io.definition_list(map);

        io.new_line();

        io.key_value_pair(vec![
            ("Application ID", "soiufghsqrpoiudshqfoih".into()),
            ("Login", "root".into()),
            ("Password", "root".into()),
        ]);

        io.new_line();

        let who = io.ask_question("Who dis:");
        io.writeln(&format!("Hello {who}"));

        io.new_line();

        let crab = io.ask_question_default("who best crab:", "Ferris");
        io.writeln(&format!("best crab is {crab}"));

        io.new_line();

        let confirmation = io.ask_confirm("Command good?");
        io.writeln(&format!("good ? {confirmation}"));

        io.new_line();
        let password = io.ask_password("Password ?");
        io.writeln(&format!("haha, got your password -> {password}"));

        io.new_line();

        let pb = io.create_progress_bar(100);
        let ten_millis = time::Duration::from_millis(10);

        for _ in 1..100 {
            thread::sleep(ten_millis);
            pb.inc(1);
        }

        pb.finish();

        io.new_line();
        io.new_line();

        let spinner = io.create_spinner();

        for _ in 1..500 {
            thread::sleep(ten_millis);
            spinner.tick();
        }

        spinner.finish();

        io.new_line();
        io.new_line();

        io.step(1, 4, "üìù learn rust...");
        io.step(2, 4, "ü¶Ä raise crabs...");
        io.step(3, 4, "‚ùî ???");
        io.step(4, 4, "üí≤ profit !");

        Ok(CommandResult::SUCCESS)
    }
}
